// Get the key of the current issue
def issueKey = issue.key

// Define the comment text to be added
def commentText1 = """
@user please add the requestor to the communication exclusion list
https://docs.google.com/spreadsheets/d/1eefSoGzAJWH7tV9hxCjiaJ1Esn0vRBKybrpJTk/edit#gid=0
"""

/*
https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issues/#api-group-issues

This script uses the Jira REST API to interact with Jira issues. 
By following this documentation, you can find more details about different endpoints 
and their usage to extend the functionality of your scripts. This link provides comprehensive 
information on how to use the Jira REST API to manage issues, comments, fields, and other related 
tasks, making it easier to automate and customize Jira operations.
*/

// Retrieve existing comments for the issue
def commentsResult = get("/rest/api/2/issue/${issueKey}/comment")
    .header('Content-Type', 'application/json')
    .asObject(Map)

// Extract the comments from the response
def comments = commentsResult.body.comments

// Check if the comment already exists
def commentAlreadyExists = comments.any { comment ->
    comment.body.contains(commentText1.trim())
}

// Add the comment if it doesn't already exist
if (!commentAlreadyExists) {
    def addCommentResult = post("/rest/api/2/issue/${issueKey}/comment")
        .header('Content-Type', 'application/json')
        .body(["body": commentText1.trim()])
        .asObject(Map)

    println("Comment added. Response: ${addCommentResult}")
} else {
    println("Duplicate comment found, not adding a new one.")
}

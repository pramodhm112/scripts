// Get the key of the current issue
def issueKey = issue.key
def issueType = issue.fields.issuetype.name
def reporter = issue.fields.reporter?.accountId

// Check if the issue type is "Story" and reporter is not a specific account ID
if (issueType == "Story" && reporter != "67290304ebd702n362") {
    
    /*
    Jira REST API documentation: 
    https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issues/#api-group-issues
    */

    // Prepare and execute the API request to update the issue's priority
    def result = put('/rest/api/2/issue/' + issueKey)
        .header('Content-Type', 'application/json')
        .body([
            fields:[
                priority: [
                    name: newPriorityName
                ]
            ]
        ])
        .asString()

    // Check the response status and print the result
    if (result.status == 204) {
        println("Priority updated successfully for issue ${issueKey}.")
    } else {
        println("Failed to update priority for issue ${issueKey}. Status: ${result.status}, Response: ${result.body}")
    }
} else {
    println("Skipping priority update for issue ${issueKey}. Issue type is ${issueType} and reporter is ${reporter}.")
}

def issueKey = issue.key

// Get the changelog for the issue
def changelogResponse = get('/rest/api/3/issue/' + issueKey + '/changelog?orderBy=-created')
    .header('Content-Type', 'application/json')
    .asObject(Map)

// Check if the request was successful
if (changelogResponse.status != 200) {
    logger.error("Failed to fetch changelog for issue $issueKey. Status code: ${changelogResponse.status}")
    return
}

// Extract the changelog entries
def changelog = changelogResponse.body.values

// Iterate through changelog entries and extract 'created' and 'items' values
def createdAndItemsValues = changelog.collect { entry ->
    [created: entry.created, items: entry.items.collect { it.field }]
}

// Sort the createdAndItemsValues list by 'created' date in descending order
def sortedCreatedAndItemsValues = createdAndItemsValues.sort { a, b -> b.created <=> a.created }

// Get the most recent 'created' value and its corresponding 'items' value
def mostRecentEntry = sortedCreatedAndItemsValues.first()

// Now mostRecentEntry contains the most recent 'created' value and its corresponding 'items' value
logger.warn("Most recent 'created' value: ${mostRecentEntry.created}")
logger.warn("Corresponding 'items' value: ${mostRecentEntry.items}")

if (mostRecentEntry.items.contains("Sprint")) {
    def result = get('/rest/api/2/issue/' + issueKey)
        .header('Content-Type', 'application/json')
        .asObject(Map)

    if (result.status == 200) {
        def subtaskType = result.body.fields.issuetype.subtask.toString() // Convert boolean to string
        def customFieldStates = result.body.fields.customfield_10015?.state?.collect { it.toString() } // Convert all states to strings
        def issueType = result.body.fields.issuetype.name
        def issueTitle = result.body.fields.summary
        def issueLink = result.body.self
        def issueComponents = result.body.fields.components?.collect { it.name }?.join(", ")
        def issueStatus = result.body.fields.status.name
        def issueReporter = result.body.fields.reporter.displayName

        logger.warn(subtaskType)
        logger.warn(customFieldStates)

        if (subtaskType == 'false' && customFieldStates != null && customFieldStates.contains('active')) {
            def resp = post("/rest/api/2/issue/${issueKey}/notify")
                .header("Content-Type", "application/json")
                .body([
                    "subject": "Issue ${issueKey} has just been added to open sprint",
                    "htmlBody": """
                        The issue ${issueKey} has been just added to an open sprint in project! Please consider it!<br><br>
                        More details about the new issue in the Sprint:<br><br>
                        Issue type: ${issueType}<br>
                        Title: ${issueTitle}<br>
                        Link: <a href="${issueLink}">${issueLink}</a><br>
                        Component(s): ${issueComponents ?: 'N/A'}<br>
                        Status: ${issueStatus}<br>
                        Reporter: ${issueReporter}
                    """.stripIndent(),
                    "to": [
                        "users": [
                            [
                                "emailAddress": "pramodh@example.com"
                            ]
                        ]
                    ]
                ])
                .asString()
        } else {
            logger.warn("It is not an active sprint or it is null")
        }
    } else {
        return "Failed to find issue: Status: ${result.status} ${result.body}"
    }
} else {
    logger.warn("Not sprint")
}
